#
name: Build and Deploy

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['main', 'stag']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{github.sha}}
            latest
            
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Lowercase the repository name to avoid the Uppercase docker issues, save it in IMAGE_REPOSITORY variable
    - name: Set IMAGE_REPOSITORY variable
      run: echo IMAGE_REPOSITORY=$(echo LightCode5794/github-actions-playgound | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
    -
      # Get the name of the branch that has the change
      name: Extract branch name
      id: extract_branch
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
    - 
      # Connect to deployment server, using  appleboy/ssh-action@v1.0.0
      name: Executing remote ssh commands using ssh key and pull the image to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }} 
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          docker login ghcr.io -u ${{github.actor}} -p ${{ secrets.GITHUB_TOKEN }}
          docker pull ${{ env.REGISTRY}}/${{env.IMAGE_REPOSITORY}}:latest
          cd /etc/github-action/ENV/gha-pl
          sudo curl -fLOk -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://raw.githubusercontent.com/${{ github.repository }}/${{ steps.extract_branch.outputs.branch}}/docker-compose.yml
          docker compose down && \
          docker compose up -d 
       

